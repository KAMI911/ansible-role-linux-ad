## {{ ansible_managed }}

[global]
workgroup = {{ linux_ad_authconfig_windomain }}
realm = {{ linux_ad_authconfig_realm.upper() }}
client signing = yes
client use spnego = yes
kerberos method = secrets and keytab
security = ads
template homedir = %H

{% if linux_ad_ansible_distribution_major_version|int < 7 and ansible_os_family == 'RedHat' %}
ntlm auth = yes
{% else %}
server min protocol = {{ linux_ad_server_min_protocol }}
client min protocol = {{ linux_ad_client_min_protocol }}
client max protocol = {{ linux_ad_client_max_protocol }}
ntlm auth = {{ linux_ad_ntlm_auth }}
{% endif }%

idmap config * : backend = tdb
idmap config * : range = 10000-199999
idmap config {{ linux_ad_authconfig_windomain }} : backend = sss
idmap config {{ linux_ad_authconfig_windomain }} : range = 200000-2147483647

passdb backend = tdbsam

{% if linux_ad_share_printers == False %}
load printers = no
printing = bsd
printcap name = /dev/null
disable spoolss = yes
{% else %}
; Have to implement
{% endif %}

{% for item in linux_ad_shares %}
[{{ item.name }}]
comment = {{ item.comment }}
path = {{ item.path }}
read only = {% if item.read_only == True %}Yes{% else %}No{% endif %}

guest ok = {% if item.guest == True %}Yes{% else %}No{% endif %}

{% if item.valid_users is defined %}valid users = {{ item.valid_users }}{% endif %}

strict allocate = {% if item.strict_allocate == False %}No{% else %}Yes{% endif %}

{% if item.force_user is defined %}force user = {{ item.force_user }}{% endif %}

{% if item.invalid_users is defined %}invalid users = {{ item.invalid_users }}{% endif %}

{% endfor %}
